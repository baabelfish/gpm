#!/bin/bash

declare -a PACKAGES
declare -A URLS
declare -A SOURCES
declare -A LINKS
declare -A BUILD
declare -A VERSION

# TPM_DIR = Path where tpm packages are installed to

# TPM_BIN = Path where links are created, user should add this to PATH himself
# Directory should also be completely devoted for TPM as "tpm clean" will delete unnecessary files

function confirm {
        read -r -p "$1 [Y/n] " yes
        yes=${yes,,} # tolower
        [[ $yes =~ ^(yes|y| ) ]]
}

## $1 - url or github suffix
# Convert url to github form
githubify() {
    local regex='^http|^git:'
    if [[ $1 =~ $regex ]]; then
        echo "$1"
    else
        echo "https://github.com/${1}"
    fi
}

# $1 = Pkg name
# $2 = file to source
addSource() {
    if [[ -z $HACK_PKG ]]; then
        local name=$1
        local source=$2
    else
        local name=$HACK_PKG
        local source=$1
    fi
    SOURCES["$name"]="$source ${SOURCES["$name"]}"
}

# $1 = Pkg name
# $2 = Target name
# $3 = Source filename
addBin() {
    if [[ -z $HACK_PKG ]]; then
        local name=$1
        local target=$2
        local source=$3
    else
        local name=$HACK_PKG
        local target=$1
        local source=$2
    fi
    # Target name has to be unique (but package might have multiple links)
    # index by target name
    LINKS["$target"]="$name $source"
}

# $1 = Pkg name
# $2 = Command
build() {
    if [[ -z $HACK_PKG ]]; then
        local name=$1
        local command=$2
    else
        local name=$HACK_PKG
        local command=$1
    fi
    BUILD["$name"]="$command"
}

# $1 = Pkg name
# $2 = Version
# I don't think it would be useful to be able to set this from packages .tpm.sh (thus, no HACK_PKG hack)
version() {
    VERSION["$1"]="$2"
}

# $1 = Pkg name
# $2 = Url
plug() {
    PACKAGES+=($1)
    URLS["$1"]="$2"
}

installPackage() {
    local url=${URLS["$1"]}
    git clone $(githubify $url) $TPM_DIR/$1

    local version=${VERSION["$1"]}
    if [[ ! -z $version ]]; then
        cd $TPM_DIR/$1
        git checkout $version
    fi

    buildPackage $1
}

updatePackage() {
    cd $TPM_DIR/$1
    git pull
    buildPackage $1
}

buildPackage() {
    local build_command=${BUILD["$1"]}
    if [[ ! -z $build_command ]]; then
        cd $TPM_DIR/$1
        $build_command
    fi
}

loadPackageFoo() {
    for x in $TPM_DIR/*/.tpm.sh; do
        local name=$(basename $(dirname $x))
        HACK_PKG=$name
        . $x
        unset HACK_PKG
    done
}

commit() {
    if [[ ! -z $CLI ]]; then
        return
    fi

    for name in ${PACKAGES[@]}; do
        if [[ ! -d $TPM_DIR/$name ]] && confirm "$name is not installed. Install?"; then
            installPackage $name
        fi

        for source in ${SOURCES["$name"]}; do
            if [[ -f $TPM_DIR/$name/$source ]]; then
                source $TPM_DIR/$name/$source
            fi
        done
    done

    loadPackageFoo

    # Make sure links are created
    for target in ${!LINKS[@]}; do
        local info=(${LINKS["$target"]})
        local pkg=${info[0]}
        local source=${info[1]}

        # Source exists and target doesn't
        if [[ -f $TPM_DIR/$pkg/$source ]] && [[ ! -f $TPM_BIN/$target ]]; then
            ln -s $TPM_DIR/$pkg/$source $TPM_BIN/$target
        fi
    done
}

# CLI, removed old packages and symlinks
clean() {
    CLI=true

    . $HOME/.tpm.sh
    loadPackageFoo

    local extras=""
    for x in $TPM_DIR/*; do
        local name=$(basename $x)
        if [[ -z ${URLS["$name"]} ]]; then
            echo "Found extra package: $name"
            extras="$extras $x"
        fi
    done

    if [[ ! -z $extras ]] && confirm "Remove extra packages"; then
        rm -rf $extras
    fi

    extras=""
    for x in $TPM_BIN/*; do
        local link=$(readlink $x)
        if [[ -z $link ]]; then
            echo "Found A FILE: $x at bin directory. Directory should only contain symlinks."
            continue
        fi

        local name=$(basename $x)
        if [[ -z ${LINKS["$name"]} ]]; then
            echo "Found extra link $name"
            extras="$extras $x"
        fi
    done

    if [[ ! -z $extras ]] && confirm "Remove extra links"; then
        rm -r $extras
    fi
}

# CLI, update packages
update() {
    CLI=true
    . $HOME/.tpm.sh

    for dir in $TPM_DIR/*; do
        local pkg=$(basename $dir)
        echo "Updating $pkg"
        updatePackage $pkg
    done

    unset CLI
    commit
}

# CLI, install missing
install() {
    CLI=true
    . $HOME/.tpm.sh

    unset CLI
    commit
}

# CLI, run command
case $1 in
    'clean')   clean ;;
    'install') install ;;
    'update')  update ;;
    *) ;;
esac

#!/bin/bash
IFS=$'\n'

source $TPM_PACKAGES/tpm/helpers.sh
source $TPM_PACKAGES/tpm/json.sh
source $TPM_PACKAGES/tpm/git.sh

JQ_NOT_DOWNLOADED=0
JQ_NO_NATIVE=0
GOTERROR=0
[[ -z $TPM_PACKAGES ]] && echo -n "\$TPM_PACKAGES" && GOTERROR=1
[[ -z $TPM_SYMLINKS ]] && echo -n "\$TPM_SYMLINKS" && GOTERROR=1
[[ -z $TPM_CONFIG ]] && echo -n "\$TPM_CONFIG" && GOTERROR=1
which jq > /dev/null
[[ "$?" != "0" ]] && JQ_NO_NATIVE=1
[[ ! -e "$TPM_PACKAGES/.aux/jq" ]] && JQ_NOT_DOWNLOADED=1
[[ $JQ_NO_NATIVE -ne 0 ]] && [[ $JQ_NOT_DOWNLOADED -ne 0 ]] && echo -e "${bold}jq${default} not found" && exit 1
[[ $GOTERROR -eq 1 ]] && echo " is not set. Did you source the \$TPM_PACKAGES/.config-file?" && exit 1

isTrue() {
    local reval=$(getField ${1} $TPM_CONFIG)
    if [[ $reval == "1" ]] || [[ $reval == "true" ]]; then
        echo 1
    else
        echo 0
    fi
}

COMMAND=''
PACKAGES=()
PARAM_NOCOLOR=$(isTrue 'nocolor')
PARAM_NOCONFIRM=$(isTrue 'noconfirm')
PARAM_QUIET=$(isTrue 'quiet')
PARAM_VERBOSE=$(isTrue 'verbose')

printHelp() {
    echo "\
Usage: tpm [option] <command>

command := disable [packages] |
           enable  [packages] |
           history [packages] |
           info    [packages] |
           install [packages] |
           search  [packages] |
           update  [packages] |

option := --help | --nocolor | --noconfirm | --quiet | --verbose
"
exit 1
}

[[ -z $1 ]] && printHelp

setCommand() {
    if [[ ! -z $COMMAND ]]; then
        PACKAGES=("${PACKAGES[@]}" "$C")
    else
        COMMAND=$1
    fi
}

commandDisable() {
    echo "UNDER CONSTRUCTION: commandDisable"
}

commandEnable() {
    echo "UNDER CONSTRUCTION: commandEnable"
}

commandHistory() {
    if [[ ${#PACKAGES[@]} -ne 1 ]]; then
        echo "You must provide one package name."
    else
        historyOne ${PACKAGES[0]}
    fi
}

commandInfo() {
    if [[ ${#PACKAGES[@]} -ne 1 ]]; then
        echo "You must provide one package name."
    else
        infoOne ${PACKAGES[0]}
    fi
}

commandInstall() {
    local PREINSTALL="$(getField 'preinstall' $TPM_CONFIG)"
    local POSTINSTALL="$(getField 'postinstall' $TPM_CONFIG)"
    [[ ! -z $PREINSTALL ]] && eval $PREINSTALL
    if [[ ${#PACKAGES[@]} -eq 0 ]]; then
        configInstall
    fi
    if [[ ! -z $POSTINSTALL ]]; then
        eval $POSTINSTALL
    fi
}

commandList() {
    PACKAGES=($(find "$TPM_PACKAGES" -maxdepth 1 -not -name '.*' -type d | tail -n +2 | sort))
    for i in ${PACKAGES[@]}; do
        listOne $i
    done
}

commandPrune() {
    configRemove
}

commandRemove() {
    if [[ ${#PACKAGES[@]} -eq 0 ]]; then
        echo "You should list packages"
    else
        for i in ${PACKAGES[@]}; do
            removeOne $i
        done
    fi
}

commandSearch() {
    echo "UNDER CONSTRUCTION: commandSearch"
}

commandUpdate() {
    configUpdate
}


for C in ${*}; do
    case $C in
        'disable') setCommand 'disable' ;;
        'enable')  setCommand 'enable' ;;
        'history') setCommand 'history' ;;
        'info')    setCommand 'info' ;;
        'install') setCommand 'install' ;;
        'list')    setCommand 'list' ;;
        'remove')  setCommand 'remove' ;;
        'prune')   setCommand 'prune' ;;
        'search')  setCommand 'search' ;;
        'update')  setCommand 'update' ;;
        '-h') ;& '--help')
            printHelp
            exit 1
            ;;
        '-c') ;& '--nocolor')   PARAM_NOCOLOR=1 ;;
        '-C') ;& '--noconfirm') PARAM_NOCONFIRM=1 ;;
        '-q') ;& '--quiet')     PARAM_QUIET=1 ;;
        '-v') ;& '--verbose')   PARAM_VERBOSE=1 ;;
        *)
            PACKAGES=("${PACKAGES[@]}" "$C")
            ;;
    esac
done

configureApplication

case $COMMAND in
    'disable') commandDisable ;;
    'enable')  commandEnable ;;
    'history') commandHistory ;;
    'info')    commandInfo ;;
    'install') commandInstall ;;
    'list')    commandList ;;
    'remove')  commandRemove ;;
    'prune')   commandPrune ;;
    'search')  commandSearch ;;
    'update')  commandUpdate ;;
    *)
        echo "Invalid command"
        exit 1
        ;;
esac
